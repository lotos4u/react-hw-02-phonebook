{"version":3,"sources":["components/ContactForm/index.jsx","components/ContactItem/index.jsx","components/FilterForm/index.jsx","components/ContactsList/index.jsx","App.js","serviceWorker.js","index.js"],"names":["ContactForm","state","name","number","handleChangeName","e","setState","target","value","handleChangeNumber","handleSubmit","preventDefault","props","onAdd","id","uuidv4","type","this","onChange","disabled","onClick","Component","defaultProps","ContactsItem","FilterForm","filter","handleChangeFilter","onFilter","ContactsList","contacts","c","includes","length","f","handleFilter","getFilteredContacts","map","item","key","App","contact","newContacts","push","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qRAIMA,E,4MAEFC,MAAQ,CACJC,KAAM,GACNC,OAAQ,I,EAGZC,iBAAmB,SAACC,GAChB,EAAKC,SAAL,2BACO,EAAKL,OADZ,IAEIC,KAAMG,EAAEE,OAAOC,U,EAIvBC,mBAAqB,SAACJ,GAClB,EAAKC,SAAL,2BACO,EAAKL,OADZ,IAEIE,OAAQE,EAAEE,OAAOC,U,EAIzBE,aAAe,SAACL,GACZA,EAAEM,iBACF,EAAKC,MAAMC,MAAM,CACbC,GAAIC,cACJb,KAAM,EAAKD,MAAMC,KACjBC,OAAQ,EAAKF,MAAME,U,uDAIjB,IAAD,OACL,OACI,oCACI,sCAEI,2BAAOa,KAAK,OAAOR,MAAOS,KAAKhB,MAAMC,KAAMgB,SAAU,SAACb,GAAD,OAAO,EAAKD,iBAAiBC,OAEtF,wCAEI,2BAAOW,KAAK,OAAOR,MAAOS,KAAKhB,MAAME,OAAQe,SAAU,SAACb,GAAD,OAAO,EAAKI,mBAAmBJ,OAE1F,4BAAQc,UAAWF,KAAKhB,MAAMC,OAASe,KAAKhB,MAAME,OAC1CiB,QAAS,SAACf,GAAD,OAAO,EAAKK,aAAaL,KAD1C,oB,GAzCUgB,aAoD1BrB,EAAYsB,aAAe,GAEZtB,QC5CAuB,EAXM,SAACX,GAAD,OACjB,4BACKA,EAAMV,KADX,KACmBU,EAAMT,SCFvBqB,E,4MAEFvB,MAAQ,CACJwB,OAAQ,I,EAGZC,mBAAqB,SAACrB,GAClB,EAAKC,SAAL,2BACO,EAAKL,OADZ,IAEIwB,OAAQpB,EAAEE,OAAOC,SAClB,WACC,EAAKI,MAAMe,SAAS,EAAK1B,MAAMwB,Y,uDAI7B,IAAD,OACL,OACI,oCACI,yDAEI,2BAAOT,KAAK,OAAOR,MAAOS,KAAKhB,MAAMwB,OAAQP,SAAU,SAACb,GAAD,OAAO,EAAKqB,mBAAmBrB,Y,GApBjFgB,aA+BzBG,EAAWF,aAAe,GAEXE,QCWAI,E,4MAxCX3B,MAAQ,CACJwB,OAAQ,I,2DAGCA,GACTR,KAAKX,SAAS,CACVmB,OAAQA,M,4CAIO,IAAD,OAClB,OAAKR,KAAKhB,MAAMwB,OAGTR,KAAKL,MAAMiB,SAASJ,QAAO,SAAAK,GAAC,OAAIA,EAAE5B,KAAK6B,SAAS,EAAK9B,MAAMwB,WAFvDR,KAAKL,MAAMiB,W,+BAKhB,IAAD,OACL,OAAO,oCACFZ,KAAKL,MAAMiB,SAASG,OAAS,GAC9B,oCACI,wCACA,kBAAC,EAAD,CAAYL,SAAU,SAACM,GAAD,OAAO,EAAKC,aAAaD,MAC/C,4BACKhB,KAAKkB,sBAAsBC,KAAI,SAAAC,GAAI,OAAI,kBAAC,EAAD,CAAcC,IAAKD,EAAKvB,GAAIZ,KAAMmC,EAAKnC,KAAMC,OAAQkC,EAAKlC,mB,GA1B3FkB,aCyBZkB,E,4MAxBXtC,MAAQ,CACJ4B,SAAU,GACV3B,KAAM,GACNC,OAAQ,I,EAGZO,aAAe,SAAC8B,GACZ,IAAMC,EAAc,EAAKxC,MAAM4B,SAC/BY,EAAYC,KAAKF,GACjB,EAAKlC,SAAL,2BACO,EAAKL,OADZ,IAEI4B,SAAUY,M,uDAKd,OAAO,oCACH,yCACA,kBAAC,EAAD,CAAa5B,MAAOI,KAAKP,eACzB,kBAAC,EAAD,CAAcmB,SAAUZ,KAAKhB,MAAM4B,gB,GApB7BR,aCOEsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.aead2a7e.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport { v4 as uuidv4 } from 'uuid';\n\nclass ContactForm extends Component {\n\n    state = {\n        name: '',\n        number: '',\n    };\n\n    handleChangeName = (e) => {\n        this.setState({\n            ...this.state,\n            name: e.target.value,\n        });\n    }\n\n    handleChangeNumber = (e) => {\n        this.setState({\n            ...this.state,\n            number: e.target.value,\n        });\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        this.props.onAdd({\n            id: uuidv4(),\n            name: this.state.name,\n            number: this.state.number,\n        });\n    }\n\n    render() {\n        return (\n            <>\n                <label>\n                    Name\n                    <input type='text' value={this.state.name} onChange={(e) => this.handleChangeName(e)}/>\n                </label>\n                <label>\n                    Number\n                    <input type='text' value={this.state.number} onChange={(e) => this.handleChangeNumber(e)}/>\n                </label>\n                <button disabled={!this.state.name || !this.state.number}\n                        onClick={(e) => this.handleSubmit(e)}>Add contact</button>\n            </>\n        );\n    }\n}\n\nContactForm.propTypes = {\n    onAdd: PropTypes.func.isRequired,\n}\n\nContactForm.defaultProps = {}\n\nexport default ContactForm;","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst ContactsItem = (props) => (\n    <li>\n        {props.name}: {props.number}\n    </li>\n)\n\nContactsItem.propTypes = {\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n}\n\nexport default ContactsItem;","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\n\nclass FilterForm extends Component {\n\n    state = {\n        filter: '',\n    };\n\n    handleChangeFilter = (e) => {\n        this.setState({\n            ...this.state,\n            filter: e.target.value,\n        }, () => {\n            this.props.onFilter(this.state.filter);\n        });\n    }\n\n    render() {\n        return (\n            <>\n                <label>\n                    Filter contacts by name\n                    <input type='text' value={this.state.filter} onChange={(e) => this.handleChangeFilter(e)}/>\n                </label>\n            </>\n        );\n    }\n}\n\nFilterForm.propTypes = {\n    onFilter: PropTypes.func.isRequired,\n}\n\nFilterForm.defaultProps = {}\n\nexport default FilterForm;","import React, {Component} from \"react\";\nimport PropTypes from \"prop-types\";\nimport ContactsItem from \"../ContactItem\";\nimport FilterForm from \"../FilterForm\";\n\nclass ContactsList extends Component {\n\n    state = {\n        filter: '',\n    };\n\n    handleFilter(filter) {\n        this.setState({\n            filter: filter,\n        });\n    }\n\n    getFilteredContacts() {\n        if (!this.state.filter) {\n            return this.props.contacts;\n        }\n        return this.props.contacts.filter(c => c.name.includes(this.state.filter));\n    }\n\n    render() {\n        return <>\n            {this.props.contacts.length > 0 &&\n            <>\n                <h1>Contacts</h1>\n                <FilterForm onFilter={(f) => this.handleFilter(f)}/>\n                <ul>\n                    {this.getFilteredContacts().map(item => <ContactsItem key={item.id} name={item.name} number={item.number}/>)}\n                </ul>\n            </>\n            }\n        </>\n    }\n}\n\nContactsList.propTypes = {\n    contacts: PropTypes.arrayOf(PropTypes.shape({\n        id: PropTypes.string,\n        name: PropTypes.string,\n        number: PropTypes.string,\n    })).isRequired,\n}\n\nexport default ContactsList;","import React, {Component} from 'react';\nimport './App.css';\nimport ContactForm from \"./components/ContactForm\";\nimport ContactsList from \"./components/ContactsList\";\n\nclass App extends Component {\n    state = {\n        contacts: [],\n        name: '',\n        number: '',\n    };\n\n    handleSubmit = (contact) => {\n        const newContacts = this.state.contacts;\n        newContacts.push(contact);\n        this.setState({\n            ...this.state,\n            contacts: newContacts,\n        });\n    };\n\n    render() {\n        return <>\n            <h1>Phonebook</h1>\n            <ContactForm onAdd={this.handleSubmit}/>\n            <ContactsList contacts={this.state.contacts}/>\n        </>;\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}